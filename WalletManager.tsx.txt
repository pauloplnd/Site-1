import { Button } from '../ui/Button';
import { Card } from '../ui/Card';
import { useState } from 'react';
import { useAuth } from '../../lib/auth/authContext';

export default function WalletManager() {
  const { user, updateCredits } = useAuth();
  const [amount, setAmount] = useState<number>(50);
  const [transactionType, setTransactionType] = useState<'deposit' | 'withdraw'>('deposit');
  const [message, setMessage] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [showHistory, setShowHistory] = useState<boolean>(false);
  
  // Transactions fictives pour la démonstration
  const mockTransactions = [
    { id: 1, type: 'deposit', amount: 100, date: '2025-03-30', status: 'completed' },
    { id: 2, type: 'bet', amount: -25, date: '2025-03-30', status: 'completed' },
    { id: 3, type: 'win', amount: 75, date: '2025-03-30', status: 'completed' },
    { id: 4, type: 'withdraw', amount: -50, date: '2025-03-29', status: 'completed' },
    { id: 5, type: 'deposit', amount: 200, date: '2025-03-28', status: 'completed' },
  ];

  // Fonction pour gérer les dépôts et retraits
  const handleTransaction = async () => {
    if (!user) {
      setMessage('Vous devez être connecté pour effectuer cette opération');
      return;
    }

    if (amount <= 0) {
      setMessage('Le montant doit être supérieur à zéro');
      return;
    }

    if (transactionType === 'withdraw' && amount > user.credits) {
      setMessage('Solde insuffisant pour ce retrait');
      return;
    }

    setIsLoading(true);
    setMessage('');

    try {
      // Simulation d'une requête API
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Mise à jour des crédits
      const newCredits = transactionType === 'deposit' 
        ? user.credits + amount 
        : user.credits - amount;
      
      updateCredits(newCredits);
      
      setMessage(
        transactionType === 'deposit' 
          ? `Dépôt de ${amount} € effectué avec succès!` 
          : `Retrait de ${amount} € effectué avec succès!`
      );
    } catch (error) {
      setMessage(`Erreur: ${error instanceof Error ? error.message : 'Une erreur est survenue'}`);
    } finally {
      setIsLoading(false);
    }
  };

  // Fonction pour augmenter le montant
  const increaseAmount = () => {
    setAmount(prev => prev + 50);
  };

  // Fonction pour diminuer le montant
  const decreaseAmount = () => {
    if (amount >= 50) {
      setAmount(prev => prev - 50);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-4">
      <h1 className="text-3xl font-bold mb-6 text-yellow-400">Gestion de votre portefeuille</h1>
      
      {/* Solde actuel */}
      <Card className="bg-gray-900 p-6 rounded-lg mb-6">
        <h2 className="text-xl font-bold mb-2 text-white">Votre solde actuel</h2>
        <div className="text-3xl font-bold text-yellow-400">{user?.credits.toFixed(2)} €</div>
      </Card>
      
      {/* Formulaire de transaction */}
      <Card className="bg-gray-900 p-6 rounded-lg mb-6">
        <h2 className="text-xl font-bold mb-4 text-white">
          {transactionType === 'deposit' ? 'Effectuer un dépôt' : 'Effectuer un retrait'}
        </h2>
        
        {message && (
          <div className={`p-3 rounded-lg mb-4 ${message.includes('succès') ? 'bg-green-900' : 'bg-red-900'}`}>
            {message}
          </div>
        )}
        
        <div className="mb-4">
          <div className="flex space-x-4 mb-4">
            <Button
              onClick={() => setTransactionType('deposit')}
              className={`flex-1 py-2 ${transactionType === 'deposit' ? 'bg-green-600' : 'bg-gray-700'}`}
            >
              Dépôt
            </Button>
            <Button
              onClick={() => setTransactionType('withdraw')}
              className={`flex-1 py-2 ${transactionType === 'withdraw' ? 'bg-red-600' : 'bg-gray-700'}`}
            >
              Retrait
            </Button>
          </div>
          
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-300 mb-1">
              Montant ({transactionType === 'deposit' ? 'à déposer' : 'à retirer'})
            </label>
            <div className="flex items-center">
              <Button 
                onClick={decreaseAmount} 
                disabled={amount <= 50}
                className="px-3 py-2 bg-gray-700 text-white rounded-l-lg"
              >
                -
              </Button>
              <div className="px-4 py-2 bg-gray-800 text-center flex-1">
                {amount} €
              </div>
              <Button 
                onClick={increaseAmount} 
                className="px-3 py-2 bg-gray-700 text-white rounded-r-lg"
              >
                +
              </Button>
            </div>
          </div>
          
          <Button
            onClick={handleTransaction}
            disabled={isLoading || !user}
            className={`w-full py-3 ${
              transactionType === 'deposit' 
                ? 'bg-green-600 hover:bg-green-700' 
                : 'bg-red-600 hover:bg-red-700'
            } text-white font-bold rounded-lg disabled:opacity-50 disabled:cursor-not-allowed`}
          >
            {isLoading 
              ? 'Traitement en cours...' 
              : transactionType === 'deposit' 
                ? 'Effectuer le dépôt' 
                : 'Effectuer le retrait'
            }
          </Button>
        </div>
        
        <div className="mt-4 text-sm text-gray-400">
          <p>
            {transactionType === 'deposit' 
              ? 'Les dépôts sont instantanément crédités sur votre compte.' 
              : 'Les retraits sont traités sous 24h ouvrables.'
            }
          </p>
        </div>
      </Card>
      
      {/* Historique des transactions */}
      <Card className="bg-gray-900 p-6 rounded-lg">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold text-white">Historique des transactions</h2>
          <Button
            onClick={() => setShowHistory(!showHistory)}
            className="px-3 py-1 bg-gray-700 text-white text-sm rounded-lg"
          >
            {showHistory ? 'Masquer' : 'Afficher'}
          </Button>
        </div>
        
        {showHistory && (
          <div className="overflow-x-auto">
            <table className="w-full text-sm text-left">
              <thead className="text-xs uppercase bg-gray-800">
                <tr>
                  <th className="px-4 py-2 rounded-tl-lg">Date</th>
                  <th className="px-4 py-2">Type</th>
                  <th className="px-4 py-2">Montant</th>
                  <th className="px-4 py-2 rounded-tr-lg">Statut</th>
                </tr>
              </thead>
              <tbody>
                {mockTransactions.map(transaction => (
                  <tr key={transaction.id} className="border-b border-gray-800">
                    <td className="px-4 py-3">{transaction.date}</td>
                    <td className="px-4 py-3 capitalize">{transaction.type}</td>
                    <td className={`px-4 py-3 ${transaction.amount > 0 ? 'text-green-500' : 'text-red-500'}`}>
                      {transaction.amount > 0 ? '+' : ''}{transaction.amount} €
                    </td>
                    <td className="px-4 py-3">
                      <span className="px-2 py-1 bg-green-900 text-green-300 rounded-full text-xs">
                        {transaction.status}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </Card>
    </div>
  );
}

import { Button } from '../ui/Button';
import { Card } from '../ui/Card';
import { useState, useEffect } from 'react';
import { 
  spin, 
  RouletteSpinResult, 
  RouletteBet,
  BetType,
  createStraightBet,
  createSplitBet,
  createStreetBet,
  createCornerBet,
  createLineBet,
  createColumnBet,
  createDozenBet,
  createRedBet,
  createBlackBet,
  createEvenBet,
  createOddBet,
  createLowBet,
  createHighBet,
  RED_NUMBERS,
  BLACK_NUMBERS
} from '../../lib/games/roulette';

export default function Roulette() {
  const [credits, setCredits] = useState<number>(1000);
  const [currentBetAmount, setCurrentBetAmount] = useState<number>(5);
  const [bets, setBets] = useState<RouletteBet[]>([]);
  const [spinResult, setSpinResult] = useState<RouletteSpinResult | null>(null);
  const [isSpinning, setIsSpinning] = useState<boolean>(false);
  const [message, setMessage] = useState<string>('Placez vos paris et lancez la roulette.');
  const [selectedBetType, setSelectedBetType] = useState<BetType>(BetType.STRAIGHT);
  const [selectedNumber, setSelectedNumber] = useState<number | null>(null);

  // Calcul du montant total des paris
  const totalBetAmount = bets.reduce((total, bet) => total + bet.amount, 0);

  // Fonction pour placer un pari
  const placeBet = (type: BetType, numbers: number[] = []) => {
    // Vérification que le joueur a assez de crédits
    if (credits < currentBetAmount) {
      setMessage('Crédits insuffisants pour parier!');
      return;
    }

    try {
      let newBet: RouletteBet;

      switch (type) {
        case BetType.STRAIGHT:
          if (selectedNumber === null) {
            setMessage('Sélectionnez un numéro pour un pari plein.');
            return;
          }
          newBet = createStraightBet(selectedNumber, currentBetAmount);
          break;
        case BetType.RED:
          newBet = createRedBet(currentBetAmount);
          break;
        case BetType.BLACK:
          newBet = createBlackBet(currentBetAmount);
          break;
        case BetType.EVEN:
          newBet = createEvenBet(currentBetAmount);
          break;
        case BetType.ODD:
          newBet = createOddBet(currentBetAmount);
          break;
        case BetType.LOW:
          newBet = createLowBet(currentBetAmount);
          break;
        case BetType.HIGH:
          newBet = createHighBet(currentBetAmount);
          break;
        case BetType.DOZEN:
          if (selectedNumber === null || selectedNumber > 2) {
            setMessage('Sélectionnez une douzaine (0-2).');
            return;
          }
          newBet = createDozenBet(selectedNumber, currentBetAmount);
          break;
        case BetType.COLUMN:
          if (selectedNumber === null || selectedNumber > 2) {
            setMessage('Sélectionnez une colonne (0-2).');
            return;
          }
          newBet = createColumnBet(selectedNumber, currentBetAmount);
          break;
        default:
          setMessage('Type de pari non pris en charge pour le moment.');
          return;
      }

      // Ajout du pari à la liste
      setBets(prevBets => [...prevBets, newBet]);
      
      // Déduction des crédits
      setCredits(prev => prev - currentBetAmount);
      
      setMessage(`Pari placé: ${type} pour ${currentBetAmount} crédits.`);
    } catch (error) {
      setMessage(`Erreur: ${error instanceof Error ? error.message : 'Une erreur est survenue'}`);
    }
  };

  // Fonction pour lancer la roulette
  const handleSpin = () => {
    if (bets.length === 0) {
      setMessage('Placez au moins un pari avant de lancer la roulette.');
      return;
    }

    // Animation de spin
    setIsSpinning(true);
    setMessage('La roulette tourne...');
    
    // Simulation d'un délai pour l'animation
    setTimeout(() => {
      try {
        // Calcul du résultat
        const result = spin([...bets]);
        setSpinResult(result);
        
        // Ajout des gains
        setCredits(prev => prev + result.totalWin);
        
        // Message de résultat
        if (result.winningBets.length > 0) {
          const profit = result.totalWin - result.totalBet;
          setMessage(`Numéro gagnant: ${result.winningNumber}. Vous avez gagné ${profit.toFixed(2)} crédits!`);
        } else {
          setMessage(`Numéro gagnant: ${result.winningNumber}. Pas de chance cette fois.`);
        }
        
        // Réinitialisation des paris
        setBets([]);
      } catch (error) {
        setMessage(`Erreur: ${error instanceof Error ? error.message : 'Une erreur est survenue'}`);
      } finally {
        setIsSpinning(false);
      }
    }, 3000);
  };

  // Fonction pour annuler tous les paris
  const clearBets = () => {
    // Remboursement des crédits
    setCredits(prev => prev + totalBetAmount);
    
    // Réinitialisation des paris
    setBets([]);
    setMessage('Tous les paris ont été annulés.');
  };

  // Fonction pour augmenter la mise
  const increaseBet = () => {
    if (currentBetAmount < 100) {
      setCurrentBetAmount(prev => prev + 5);
    }
  };

  // Fonction pour diminuer la mise
  const decreaseBet = () => {
    if (currentBetAmount > 5) {
      setCurrentBetAmount(prev => prev - 5);
    }
  };

  // Fonction pour déterminer la couleur d'un numéro
  const getNumberColor = (number: number): string => {
    if (number === 0) return 'bg-green-600';
    return RED_NUMBERS.includes(number) ? 'bg-red-600' : 'bg-black';
  };

  // Fonction pour sélectionner un numéro
  const selectNumber = (number: number) => {
    setSelectedNumber(number);
    setMessage(`Numéro ${number} sélectionné. Choisissez votre type de pari.`);
  };

  // Rendu de la table de roulette
  const renderRouletteTable = () => {
    // Création de la grille de numéros (3 lignes x 12 colonnes)
    const rows = [];
    
    for (let row = 0; row < 3; row++) {
      const cells = [];
      for (let col = 0; col < 12; col++) {
        const number = col * 3 + (3 - row);
        cells.push(
          <button
            key={`cell-${row}-${col}`}
            onClick={() => selectNumber(number)}
            className={`
              w-10 h-10 flex items-center justify-center rounded-full
              ${getNumberColor(number)}
              ${selectedNumber === number ? 'ring-2 ring-yellow-400' : ''}
              hover:opacity-80 transition-opacity
            `}
          >
            {number}
          </button>
        );
      }
      rows.push(
        <div key={`row-${row}`} className="flex gap-1">
          {cells}
        </div>
      );
    }
    
    // Ajout du zéro
    rows.unshift(
      <div key="row-zero" className="flex justify-center mb-1">
        <button
          onClick={() => selectNumber(0)}
          className={`
            w-10 h-10 flex items-center justify-center rounded-full
            bg-green-600
            ${selectedNumber === 0 ? 'ring-2 ring-yellow-400' : ''}
            hover:opacity-80 transition-opacity
          `}
        >
          0
        </button>
      </div>
    );
    
    return (
      <div className="flex flex-col gap-1 mb-4">
        {rows}
      </div>
    );
  };

  // Rendu des options de paris
  const renderBetOptions = () => {
    return (
      <div className="grid grid-cols-3 gap-2 mb-4">
        <Button
          onClick={() => setSelectedBetType(BetType.STRAIGHT)}
          className={`py-2 ${selectedBetType === BetType.STRAIGHT ? 'bg-yellow-600' : 'bg-gray-700'}`}
        >
          Plein
        </Button>
        <Button
          onClick={() => setSelectedBetType(BetType.RED)}
          className={`py-2 ${selectedBetType === BetType.RED ? 'bg-yellow-600' : 'bg-red-600'}`}
        >
          Rouge
        </Button>
        <Button
          onClick={() => setSelectedBetType(BetType.BLACK)}
          className={`py-2 ${selectedBetType === BetType.BLACK ? 'bg-yellow-600' : 'bg-black'}`}
        >
          Noir
        </Button>
        <Button
          onClick={() => setSelectedBetType(BetType.EVEN)}
          className={`py-2 ${selectedBetType === BetType.EVEN ? 'bg-yellow-600' : 'bg-gray-700'}`}
        >
          Pair
        </Button>
        <Button
          onClick={() => setSelectedBetType(BetType.ODD)}
          className={`py-2 ${selectedBetType === BetType.ODD ? 'bg-yellow-600' : 'bg-gray-700'}`}
        >
          Impair
        </Button>
        <Button
          onClick={() => setSelectedBetType(BetType.DOZEN)}
          className={`py-2 ${selectedBetType === BetType.DOZEN ? 'bg-yellow-600' : 'bg-gray-700'}`}
        >
          Douzaine
        </Button>
        <Button
          onClick={() => setSelectedBetType(BetType.COLUMN)}
          className={`py-2 ${selectedBetType === BetType.COLUMN ? 'bg-yellow-600' : 'bg-gray-700'}`}
        >
          Colonne
        </Button>
        <Button
          onClick={() => setSelectedBetType(BetType.LOW)}
          className={`py-2 ${selectedBetType === BetType.LOW ? 'bg-yellow-600' : 'bg-gray-700'}`}
        >
          1-18
        </Button>
        <Button
          onClick={() => setSelectedBetType(BetType.HIGH)}
          className={`py-2 ${selectedBetType === BetType.HIGH ? 'bg-yellow-600' : 'bg-gray-700'}`}
        >
          19-36
        </Button>
      </div>
    );
  };

  // Rendu de la roue de roulette (animation)
  const renderRouletteWheel = () => {
    return (
      <div className={`
        w-40 h-40 rounded-full border-4 border-yellow-600 mx-auto mb-4
        bg-gradient-to-r from-red-600 via-black to-red-600
        ${isSpinning ? 'animate-spin' : ''}
        flex items-center justify-center
      `}>
        {spinResult && !isSpinning && (
          <div className={`
            w-16 h-16 rounded-full flex items-center justify-center text-2xl font-bold
            ${getNumberColor(spinResult.winningNumber)}
          `}>
            {spinResult.winningNumber}
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="flex flex-col items-center p-4 bg-gradient-to-b from-red-900 to-red-700 min-h-screen text-white">
      <h1 className="text-4xl font-bold mb-8 text-yellow-400 mt-8">Roulette Européenne</h1>
      
      {/* Affichage des crédits */}
      <div className="bg-black p-4 rounded-lg mb-8 w-full max-w-md text-center">
        <h2 className="text-2xl font-bold text-yellow-400">Crédits: {credits.toFixed(2)}</h2>
      </div>
      
      {/* Table de jeu */}
      <Card className="bg-green-900 p-6 rounded-lg mb-8 w-full max-w-2xl">
        {/* Roue de roulette */}
        {renderRouletteWheel()}
        
        {/* Affichage du message */}
        <div className="text-center mb-4 h-8">
          <p className={`text-lg ${message.includes('gagné') ? 'text-yellow-400' : 'text-white'}`}>
            {message}
          </p>
        </div>
        
        {/* Table de roulette */}
        <div className="flex justify-center mb-4">
          {renderRouletteTable()}
        </div>
        
        {/* Options de paris */}
        {renderBetOptions()}
        
        {/* Contrôles de mise */}
        <div className="grid grid-cols-2 gap-4 mb-4">
          <div className="bg-gray-800 p-3 rounded-lg">
            <div className="flex justify-between items-center">
              <span className="text-sm">Mise:</span>
              <div className="flex items-center">
                <Button 
                  onClick={decreaseBet} 
                  disabled={currentBetAmount <= 5 || isSpinning}
                  className="px-2 py-1 bg-red-700 text-white rounded-l"
                >
                  -
                </Button>
                <span className="px-3 py-1 bg-gray-700">{currentBetAmount.toFixed(2)}</span>
                <Button 
                  onClick={increaseBet} 
                  disabled={currentBetAmount >= 100 || isSpinning}
                  className="px-2 py-1 bg-green-700 text-white rounded-r"
                >
                  +
                </Button>
              </div>
            </div>
          </div>
          
          <Button 
            onClick={() => placeBet(selectedBetType)}
            disabled={isSpinning || credits < currentBetAmount}
            className="py-3 bg-blue-600 hover:bg-blue-700 text-white font-bold rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Placer le pari
          </Button>
        </div>
        
        {/* Affichage des paris actuels */}
        <div className="bg-gray-800 p-3 rounded-lg mb-4">
          <h3 className="text-lg font-bold mb-2">Paris actuels: {totalBetAmount.toFixed(2)} crédits</h3>
          <div className="max-h-32 overflow-y-auto">
            {bets.length > 0 ? (
              <ul className="space-y-1">
                {bets.map((bet, index) => (
                  <li key={index} className="text-sm">
                    {bet.type} {bet.numbers.length <= 5 ? `(${bet.numbers.join(', ')})` : ''} - {bet.amount.toFixed(2)} crédits
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-gray-400 text-sm">Aucun pari placé</p>
            )}
          </div>
        </div>
        
        {/* Boutons d'action */}
        <div className="grid grid-cols-2 gap-4">
          <Button 
            onClick={clearBets} 
            disabled={bets.length === 0 || isSpinning}
            className="py-3 bg-red-600 hover:bg-red-700 text-white font-bold rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Annuler les paris
          </Button>
          
          <Button 
            onClick={handleSpin} 
            disabled={bets.length === 0 || isSpinning}
            className="py-3 bg-gradient-to-r from-yellow-500 to-yellow-600 hover:from-yellow-600 hover:to-yellow-700 text-black font-bold rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isSpinning ? 'La roulette tourne...' : 'Lancer la roulette'}
          </Button>
        </div>
      </Card>
      
      {/* Tableau des gains */}
      <Card className="bg-black p-4 rounded-lg mb-8 w-full max-w-md">
        <h3 className="text-xl font-bold mb-2 text-center text-yellow-400">Tableau des gains</h3>
        <div className="grid grid-cols-2 gap-2 text-sm">
          <div className="flex justify-between">
            <span>Plein (1 numéro)</span>
            <span className="font-bold">35:1</span>
          </div>
          <div className="flex justify-between">
            <span>Cheval (2 numéros)</span>
            <span className="font-bold">17:1</span>
          </div>
          <div className="flex justify-between">
            <span>Transversale (3 numéros)</span>
            <span className="font-bold">11:1</span>
          </div>
          <div className="flex justify-between">
            <span>Carré (4 numéros)</span>
            <span className="font-bold">8:1</span>
          </div>
          <div className="flex justify-between">
            <span>Sixain (6 numéros)</span>
            <span className="font-bold">5:1</span>
          </div>
          <div className="flex justify-between">
            <span>Colonne (12 numéros)</span>
            <span className="font-bold">2:1</span>
          </div>
          <div className="flex justify-between">
            <span>Douzaine (12 numéros)</span>
            <span className="font-bold">2:1</span>
          </div>
          <div className="flex justify-between">
            <span>Rouge/Noir, Pair/Impair, 1-18/19-36</span>
            <span className="font-bold">1:1</span>
          </div>
        </div>
      </Card>
    </div>
  );
}
